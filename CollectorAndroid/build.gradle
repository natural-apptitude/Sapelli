/**
 * Sapelli data collection platform: http://sapelli.org
 *
 * Copyright 2012-2016 University College London - ExCiteS group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'hu.supercluster.paperwork'
apply plugin: 'com.jakewharton.hugo'
apply plugin: 'org.ajoberstar.grgit'

def keysFolder = file('../../Keys/') // location of signing keys and other private credentials

repositories {
    google()
    maven { url 'https://maven.fabric.io/public' }
}

ext {
    // Read private/external fabric.properties file:
    fabric = new Properties();
    try {
        fabric.load(new FileInputStream(new File(keysFolder, 'fabric.properties')));
    }
    catch (Exception e) {
        println('Using dummy fabric apiKey/Secret\nError message: ' + e.getLocalizedMessage());
        fabric.setProperty('apiKey', '0000000000000000000000000000000000000000');
        fabric.setProperty('apiSecret', '0000000000000000000000000000000000000000000000000000000000000000');
    }

    // Update local fabric.properties file:
    ant.propertyfile(file: 'fabric.properties') {
        entry(key: "apiSecret", value: fabric['apiSecret'])
    }

    // Read private/external signing properties:
    //  Release:
    releaseSigning = new Properties()
    try {
        releaseSigning.load(new FileInputStream(new File(keysFolder, 'release.properties')));
    }
    catch (Exception e) {
        println('Cannot find file release.properties that contaings the release signing key information.\nError ' +
                'message: ' + e.getLocalizedMessage());
    }
    //  Debug:
    debugSigning = new Properties()
    try {
        debugSigning.load(new FileInputStream(new File(keysFolder, 'debug.properties')));
    }
    catch (Exception e) {
        println('Cannot find file debug.properties that contaings the debug signing key information.\nError message: ' +
                e.getLocalizedMessage());
    }

    // We use the number of hours since 2012-01-01T00:00:00.000Z as the versionCode
    buildTimeBasedVersionCode = {
        def c = Calendar.instance;
        c.clear();
        c.timeZone = TimeZone.getTimeZone("UTC");
        c.set(2012, 0, 1);
        (int) ((System.currentTimeMillis() - c.timeInMillis) / 1000 / 60 / 60);
    }
}

// Generates paperwork.json asset file containing build information
// (which we read from in the BuildInfo class of the app):
paperwork {
    set = [
            buildTimeUTC: buildTime("yyyy-MM-dd'T'HH:mm:ss", "UTC"),
            gitSha      : gitSha(),
            gitTag      : gitTag(),
            gitInfo     : gitInfo(),
            gitBranch   : shell('git rev-parse --abbrev-ref HEAD'),
            userName    : System.getProperty("user.name") // OS user
    ]
}

android {
    compileSdkVersion 29
    buildToolsVersion '26.0.3'

    signingConfigs {
        release {
            if (releaseSigning['keystore-path'] != null) {
                storeFile new File(keysFolder, "" + releaseSigning['keystore-path'])
                storePassword releaseSigning['keystore-passwd']
                keyAlias releaseSigning['key-alias']
                keyPassword releaseSigning['key-passwd']
            }
        }
        debug {
            if (debugSigning['keystore-path'] != null) {
                storeFile new File(keysFolder, "" + debugSigning['keystore-path'])
                storePassword debugSigning['keystore-passwd']
                keyAlias debugSigning['key-alias']
                keyPassword debugSigning['key-passwd']
            }
        }
    }
    defaultConfig {
        applicationId project.group + '.sapelli.collector'
        minSdkVersion 19 // = GINGERBREAD_MR1 (as found on Samsung Galaxy Xcover(1))
        targetSdkVersion 29
        // = LOLLIPOP_MR1 (for now we do not target 23 or higher, this is to avoid the run-time/revocable permissions of Android 6.0 and higher)

        versionName project.version // defined in root build.gradle file
        versionCode buildTimeBasedVersionCode()
        // the number of hours since 2012-01-01T00:00:00.000Z
        setProperty("archivesBaseName", "sapelli-collector-android-$versionName")

        vectorDrawables.useSupportLibrary = true

        manifestPlaceholders = [fabricApiKey: fabric['apiKey']]
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            // Signing the app
            signingConfig signingConfigs.release

            // Fabric release info
            ext.betaDistributionReleaseNotesFilePath = "$projectDir" + "/beta-notes.txt"
            // ext.betaDistributionEmailsFilePath = "This is not used for now"
            // Release it to UCL ExCiteS internal group
            ext.betaDistributionGroupAliases = "ucl-excites-internal"
        }
        releaseTest { // identical to release except it's debuggable
            initWith(buildTypes.release)
            debuggable true
        }
        debug {
            debuggable true
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"

            // Signing the app
            signingConfig signingConfigs.debug
        }
    }
    compileOptions {
        encoding 'UTF-8'
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

/**
 * Check if a version is snapshot and throw an exception if it is
 */
def checkSnapshot = {
    def snapshot = releaseSapelliCollector.project.version.toString().contains("SNAPSHOT")

    if (snapshot) {
        throw new GradleException("This is a SNAPSHOT version. Please change the version and try again.")
    }

    return !snapshot
}

/**
 * Commit changes to git
 */
task gitCommit {
    description = 'Commit changes before a release version.'
    group "Sapelli"

    // Check if the project has a proper version and is not a SNAPSHOT release
    onlyIf(checkSnapshot)

    doLast {
        def message = "Released build ${project.version}"
        grgit.commit(message: message, all: true)
        println "Git commit: " + message
    }
}

/**
 * Add a tag to git
 */
task gitTagRelease {
    description = 'Tags the current head with the project\'s version.'
    group "Sapelli"

    // Check if the project has a proper version and is not a SNAPSHOT release
    onlyIf(checkSnapshot)

    doLast {
        grgit.tag.add {
            name = project.version
            message = "Released build ${project.version}"
            println "Added git tag: " + name
        }
    }
}

/**
 * A wrapper for the Android assembleRelease task
 */
task assembleReleaseWrapper(type: GradleBuild) {
    tasks = ['assembleRelease']
}

/**
 * A wrapper for the Fabric crashlyticsUploadDistributionRelease task
 */
task uploadReleaseWrapper(type: GradleBuild) {
    tasks = ['crashlyticsUploadDistributionRelease']
}

/**
 * Assemble and release Sapelli task
 */
task releaseSapelliCollector {
    description "Release task for Sapelli Android Collector"
    group "Sapelli"

    // Check if the project has a proper version and is not a SNAPSHOT release
    onlyIf(checkSnapshot)

    // Define task dependencies

    // Git operations
    dependsOn(gitCommit)
    dependsOn(gitTagRelease)

    // Assemble
    dependsOn(assembleReleaseWrapper)
    // Upload
    dependsOn(uploadReleaseWrapper)

    // We want to ensure that we commit and tag the release before the assemble
    gitTagRelease.mustRunAfter(gitCommit)
    assembleReleaseWrapper.mustRunAfter(gitTagRelease)

    // We want to ensure that uploading to Fabric happens only after we have an apk file
    uploadReleaseWrapper.mustRunAfter(assembleReleaseWrapper)
}

task wrapper(type: Wrapper){

}

dependencies {
    // Local libs:
    //compile fileTree(dir: 'libs', include: ['*.jar'])

    // Testing:
    //testCompile 'junit:junit:4.12'

    // Sapelli Library:
    implementation project(':Library')

    // Google:
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.3.0'

    // Other dependencies:
    implementation 'com.github.michalis-vitos:aFileChooser:e359025948'
    implementation 'com.caverock:androidsvg:1.2.2-beta-1'
    implementation 'com.jpardogo.materialtabstrip:library:1.1.1'
    implementation 'com.loopj.android:android-async-http:1.4.9'

    // Crashlytics Kit
    compile('com.crashlytics.sdk.android:crashlytics:2.6.5@aar') {
        transitive = true
    }
    // Paperwork
    implementation 'hu.supercluster:paperwork:1.2.7'

    // Timber for logging:
    implementation 'com.jakewharton.timber:timber:4.6.0'
    // Debug and Crashlytics trees
    implementation 'com.github.michalis-vitos:timberutils:1.0.0'
    //  This lib is built using minSdkVersion=15, which we are overriding to the minSdkVersion
    //  of the app (currently 10) in AndroidManifest.xml, seemingly without problems. If we
    //  switch to a newer release of timber we must re-evaluate whether this is still needed
    //  and still does not cause problems.

    // Stetho debugging
    implementation 'com.facebook.stetho:stetho:1.5.0'

    implementation 'pub.devrel:easypermissions:3.0.0'
}
